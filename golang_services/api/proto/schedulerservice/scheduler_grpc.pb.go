// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: scheduler.proto

package schedulerservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SchedulerService_CreateScheduledMessage_FullMethodName = "/schedulerservice.SchedulerService/CreateScheduledMessage"
	SchedulerService_GetScheduledMessage_FullMethodName    = "/schedulerservice.SchedulerService/GetScheduledMessage"
	SchedulerService_ListScheduledMessages_FullMethodName  = "/schedulerservice.SchedulerService/ListScheduledMessages"
	SchedulerService_UpdateScheduledMessage_FullMethodName = "/schedulerservice.SchedulerService/UpdateScheduledMessage"
	SchedulerService_DeleteScheduledMessage_FullMethodName = "/schedulerservice.SchedulerService/DeleteScheduledMessage"
)

// SchedulerServiceClient is the client API for SchedulerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerServiceClient interface {
	CreateScheduledMessage(ctx context.Context, in *CreateScheduledMessageRequest, opts ...grpc.CallOption) (*ScheduledMessage, error)
	GetScheduledMessage(ctx context.Context, in *GetScheduledMessageRequest, opts ...grpc.CallOption) (*ScheduledMessage, error)
	ListScheduledMessages(ctx context.Context, in *ListScheduledMessagesRequest, opts ...grpc.CallOption) (*ListScheduledMessagesResponse, error)
	UpdateScheduledMessage(ctx context.Context, in *UpdateScheduledMessageRequest, opts ...grpc.CallOption) (*ScheduledMessage, error)
	DeleteScheduledMessage(ctx context.Context, in *DeleteScheduledMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type schedulerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerServiceClient(cc grpc.ClientConnInterface) SchedulerServiceClient {
	return &schedulerServiceClient{cc}
}

func (c *schedulerServiceClient) CreateScheduledMessage(ctx context.Context, in *CreateScheduledMessageRequest, opts ...grpc.CallOption) (*ScheduledMessage, error) {
	out := new(ScheduledMessage)
	err := c.cc.Invoke(ctx, SchedulerService_CreateScheduledMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) GetScheduledMessage(ctx context.Context, in *GetScheduledMessageRequest, opts ...grpc.CallOption) (*ScheduledMessage, error) {
	out := new(ScheduledMessage)
	err := c.cc.Invoke(ctx, SchedulerService_GetScheduledMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) ListScheduledMessages(ctx context.Context, in *ListScheduledMessagesRequest, opts ...grpc.CallOption) (*ListScheduledMessagesResponse, error) {
	out := new(ListScheduledMessagesResponse)
	err := c.cc.Invoke(ctx, SchedulerService_ListScheduledMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) UpdateScheduledMessage(ctx context.Context, in *UpdateScheduledMessageRequest, opts ...grpc.CallOption) (*ScheduledMessage, error) {
	out := new(ScheduledMessage)
	err := c.cc.Invoke(ctx, SchedulerService_UpdateScheduledMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerServiceClient) DeleteScheduledMessage(ctx context.Context, in *DeleteScheduledMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SchedulerService_DeleteScheduledMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServiceServer is the server API for SchedulerService service.
// All implementations must embed UnimplementedSchedulerServiceServer
// for forward compatibility
type SchedulerServiceServer interface {
	CreateScheduledMessage(context.Context, *CreateScheduledMessageRequest) (*ScheduledMessage, error)
	GetScheduledMessage(context.Context, *GetScheduledMessageRequest) (*ScheduledMessage, error)
	ListScheduledMessages(context.Context, *ListScheduledMessagesRequest) (*ListScheduledMessagesResponse, error)
	UpdateScheduledMessage(context.Context, *UpdateScheduledMessageRequest) (*ScheduledMessage, error)
	DeleteScheduledMessage(context.Context, *DeleteScheduledMessageRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSchedulerServiceServer()
}

// UnimplementedSchedulerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerServiceServer struct {
}

func (UnimplementedSchedulerServiceServer) CreateScheduledMessage(context.Context, *CreateScheduledMessageRequest) (*ScheduledMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduledMessage not implemented")
}
func (UnimplementedSchedulerServiceServer) GetScheduledMessage(context.Context, *GetScheduledMessageRequest) (*ScheduledMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledMessage not implemented")
}
func (UnimplementedSchedulerServiceServer) ListScheduledMessages(context.Context, *ListScheduledMessagesRequest) (*ListScheduledMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScheduledMessages not implemented")
}
func (UnimplementedSchedulerServiceServer) UpdateScheduledMessage(context.Context, *UpdateScheduledMessageRequest) (*ScheduledMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduledMessage not implemented")
}
func (UnimplementedSchedulerServiceServer) DeleteScheduledMessage(context.Context, *DeleteScheduledMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScheduledMessage not implemented")
}
func (UnimplementedSchedulerServiceServer) mustEmbedUnimplementedSchedulerServiceServer() {}

// UnsafeSchedulerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServiceServer will
// result in compilation errors.
type UnsafeSchedulerServiceServer interface {
	mustEmbedUnimplementedSchedulerServiceServer()
}

func RegisterSchedulerServiceServer(s grpc.ServiceRegistrar, srv SchedulerServiceServer) {
	s.RegisterService(&SchedulerService_ServiceDesc, srv)
}

func _SchedulerService_CreateScheduledMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduledMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).CreateScheduledMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerService_CreateScheduledMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).CreateScheduledMessage(ctx, req.(*CreateScheduledMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_GetScheduledMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).GetScheduledMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerService_GetScheduledMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).GetScheduledMessage(ctx, req.(*GetScheduledMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_ListScheduledMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScheduledMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).ListScheduledMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerService_ListScheduledMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).ListScheduledMessages(ctx, req.(*ListScheduledMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_UpdateScheduledMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduledMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).UpdateScheduledMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerService_UpdateScheduledMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).UpdateScheduledMessage(ctx, req.(*UpdateScheduledMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerService_DeleteScheduledMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScheduledMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).DeleteScheduledMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerService_DeleteScheduledMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).DeleteScheduledMessage(ctx, req.(*DeleteScheduledMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchedulerService_ServiceDesc is the grpc.ServiceDesc for SchedulerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchedulerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedulerservice.SchedulerService",
	HandlerType: (*SchedulerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScheduledMessage",
			Handler:    _SchedulerService_CreateScheduledMessage_Handler,
		},
		{
			MethodName: "GetScheduledMessage",
			Handler:    _SchedulerService_GetScheduledMessage_Handler,
		},
		{
			MethodName: "ListScheduledMessages",
			Handler:    _SchedulerService_ListScheduledMessages_Handler,
		},
		{
			MethodName: "UpdateScheduledMessage",
			Handler:    _SchedulerService_UpdateScheduledMessage_Handler,
		},
		{
			MethodName: "DeleteScheduledMessage",
			Handler:    _SchedulerService_DeleteScheduledMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduler.proto",
}
