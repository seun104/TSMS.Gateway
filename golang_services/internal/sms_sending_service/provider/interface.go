package provider

import (
	"context"
	// You might want to use a more specific struct from a shared domain or this service's domain
	// For now, using the core_sms OutboxMessage as a reference for details needed.
	// "github.com/aradsms/golang_services/internal/core_sms/domain"
)

// SendRequestDetails contains all necessary information to send an SMS via a provider.
type SendRequestDetails struct {
	InternalMessageID string // UUID generated by our system (e.g., outbox_messages.id)
	SenderID          string
	Recipient         string
	Content           string
	UserData          *string // Optional user data from the original request
    // Add any other provider-specific fields if they are common, or handle them in specific adapters
}

// SendResponseDetails contains results from the provider after attempting to send an SMS.
type SendResponseDetails struct {
	ProviderMessageID string // The ID returned by the provider for this specific message
	IsSuccess         bool   // True if successfully submitted to provider, false otherwise
	ProviderStatus    string // Status code or message from the provider
	ErrorMessage      string // Detailed error if IsSuccess is false
}

// SMSSenderProvider defines the interface for an SMS sending provider.
type SMSSenderProvider interface {
	// Send attempts to send an SMS message using the provider.
	// It returns the provider's message ID on successful submission, or an error.
	Send(ctx context.Context, details SendRequestDetails) (*SendResponseDetails, error)

	// GetName returns the name of the provider (e.g., "MockSMS", "AradProvider").
	GetName() string

    // Optional: GetBalance if providers support it and it's useful here
    // GetBalance(ctx context.Context) (string, error)
}
